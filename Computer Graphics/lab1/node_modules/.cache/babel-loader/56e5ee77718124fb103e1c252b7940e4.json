{"ast":null,"code":"var _jsxFileName = \"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [colorValue, setColorValue] = useState('#000000');\n  const [RGBValue, setRGBValue] = useState('rgb(0, 0, 0)');\n  const [CMYKValue, setCMYKValue] = useState('cmyk(0%, 0%, 0%, 100%)');\n  const [HLSValue, setHLSValue] = useState('hls(0, 0%, 0%)');\n  const [RGBValid, setRGBValid] = useState(true);\n  const [CMYKValid, setCMYKValid] = useState(true);\n  const [HLSValid, setHLSValid] = useState(true);\n  useEffect(() => {\n    let res = hexToRgb(colorValue);\n    setRGBValue(`rgb(${res.r}, ${res.g}, ${res.b})`);\n  }, [colorValue]);\n\n  const hexToRgb = hex => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  };\n\n  const rgbToHex = (r, g, b) => {\n    const componentToHex = c => {\n      let hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    };\n\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  };\n\n  const cmykToRgb = (c, m, y, k) => {\n    return {\n      r: Math.round(255 * (1 - c) * (1 - k)),\n      g: Math.round(255 * (1 - m) * (1 - k)),\n      b: Math.round(255 * (1 - y) * (1 - k))\n    };\n  };\n\n  const colorInput = e => {\n    setColorValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"RGB, CMYK, HLS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: colorValue,\n        onInput: colorInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"RGB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!RGBValid ? 'error' : ''}`,\n        value: RGBValue,\n        onChange: e => {\n          setRGBValue(e.target.value);\n          let splited = /^rgb\\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*\\)$/.exec(e.target.value);\n\n          if (splited === null) {\n            setRGBValid(false);\n            return;\n          }\n\n          setRGBValid(true);\n          splited = splited.map(x => parseInt(x));\n          setColorValue(rgbToHex(splited[1], splited[2], splited[3]));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"CMYK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!CMYKValid ? 'error' : ''}`,\n        value: CMYKValue,\n        onChange: e => {\n          setCMYKValue(e.target.value);\n          let splited = /^cmyk\\(([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n\n          if (splited === null) {\n            setCMYKValid(false);\n            return;\n          }\n\n          setCMYKValid(true);\n          splited = splited.map(x => parseInt(x) / 100);\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4]);\n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"HLS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!HLSValid ? 'error' : ''}`,\n        value: HLSValue,\n        onChange: e => {\n          setHLSValue(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"aQsoxV/rFYUxqg4jSjA98dsC5hE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js"],"names":["React","useEffect","useState","App","colorValue","setColorValue","RGBValue","setRGBValue","CMYKValue","setCMYKValue","HLSValue","setHLSValue","RGBValid","setRGBValid","CMYKValid","setCMYKValid","HLSValid","setHLSValid","res","hexToRgb","r","g","b","hex","result","exec","parseInt","rgbToHex","componentToHex","c","toString","length","cmykToRgb","m","y","k","Math","round","colorInput","e","target","value","splited","map","x","rgb"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [colorValue, setColorValue] = useState('#000000')\n  const [RGBValue, setRGBValue] = useState('rgb(0, 0, 0)')\n  const [CMYKValue, setCMYKValue] = useState('cmyk(0%, 0%, 0%, 100%)')\n  const [HLSValue, setHLSValue] = useState('hls(0, 0%, 0%)')\n\n  const [RGBValid, setRGBValid] = useState(true)\n  const [CMYKValid, setCMYKValid] = useState(true)\n  const [HLSValid, setHLSValid] = useState(true)\n\n  useEffect(() => {\n    let res = hexToRgb(colorValue)\n    \n    setRGBValue(`rgb(${res.r}, ${res.g}, ${res.b})`)\n  }, [colorValue])\n\n  const hexToRgb = (hex) => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n  \n  const rgbToHex= (r, g, b) => {\n    const componentToHex = (c) => {\n      let hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    }\n\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  const cmykToRgb = (c, m, y, k) => {\n    return {\n      r: Math.round(255 * (1 - c) * (1 - k)),\n      g: Math.round(255 * (1 - m) * (1 - k)),\n      b: Math.round(255 * (1 - y) * (1 - k))\n    }\n  }\n\n  const colorInput = (e) => {\n    setColorValue(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>RGB, CMYK, HLS</h1>\n      <div>\n        <input type='color' value={colorValue} onInput={colorInput}/>\n      </div>\n      <div>\n        <span>RGB</span>\n        <input type='text' className={`${!RGBValid ? 'error' : ''}`} value={RGBValue} onChange={(e) => {\n          setRGBValue(e.target.value)\n\n          let splited = /^rgb\\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setRGBValid(false);\n            return\n          }\n          setRGBValid(true);\n\n          splited = splited.map((x) => parseInt(x))\n          setColorValue(rgbToHex(splited[1], splited[2], splited[3]))\n          }}/>\n      </div>\n      <div>\n        <span>CMYK</span>\n        <input type='text' className={`${!CMYKValid ? 'error' : ''}`} value={CMYKValue} onChange={(e) => {\n          setCMYKValue(e.target.value)\n\n          let splited = /^cmyk\\(([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setCMYKValid(false);\n            return\n          }\n          setCMYKValid(true);\n\n          splited = splited.map((x) => parseInt(x) / 100)\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4])\n          \n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b))\n          }}/>\n      </div>\n      <div>\n        <span>HLS</span>\n        <input type='text' className={`${!HLSValid ? 'error' : ''}`} value={HLSValue} onChange={(e) => {\n          setHLSValue(e.target.value)\n          }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
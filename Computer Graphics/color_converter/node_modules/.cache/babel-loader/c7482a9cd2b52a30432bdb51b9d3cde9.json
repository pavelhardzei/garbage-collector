{"ast":null,"code":"var _jsxFileName = \"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [colorValue, setColorValue] = useState('#000000');\n  const [RGBValue, setRGBValue] = useState('rgb(0, 0, 0)');\n  const [CMYKValue, setCMYKValue] = useState('cmyk(0%, 0%, 0%, 100%)');\n  const [HLSValue, setHLSValue] = useState('hls(0, 0%, 0%)');\n  const [RGBValid, setRGBValid] = useState(true);\n  const [CMYKValid, setCMYKValid] = useState(true);\n  const [HLSValid, setHLSValid] = useState(true);\n  const [editing, setEditing] = useState(null);\n  useEffect(() => {\n    if (editing == null) return;\n    let rgb = hexToRgb(colorValue);\n    let cmyk = rgbToCmyk(rgb.r, rgb.g, rgb.b);\n    if (editing != 'rgb') setRGBValue(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`);\n    if (editing != 'cmyk') setCMYKValue(`cmyk(${cmyk.c}%, ${cmyk.m}%, ${cmyk.y}%, ${cmyk.k}%)`);\n  }, [colorValue]);\n\n  const hexToRgb = hex => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  };\n\n  const rgbToHex = (r, g, b) => {\n    const componentToHex = c => {\n      let hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    };\n\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  };\n\n  const cmykToRgb = (c, m, y, k) => {\n    return {\n      r: Math.round(255 * (1 - c) * (1 - k)),\n      g: Math.round(255 * (1 - m) * (1 - k)),\n      b: Math.round(255 * (1 - y) * (1 - k))\n    };\n  };\n\n  const rgbToCmyk = (r, g, b) => {\n    let k = Math.min(1 - r / 255, 1 - g / 255, 1 - b / 255);\n    return {\n      c: Math.round(100 * (1 - r / 255 - k) / (1 - k)),\n      m: Math.round(100 * (1 - g / 255 - k) / (1 - k)),\n      y: Math.round(100 * (1 - b / 255 - k) / (1 - k)),\n      k: Math.round(100 * k)\n    };\n  };\n\n  const colorInput = e => {\n    setColorValue(e.target.value);\n    setEditing('none');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"RGB, CMYK, HLS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: colorValue,\n        onInput: colorInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"RGB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!RGBValid ? 'error' : ''}`,\n        value: RGBValue,\n        onChange: e => {\n          setRGBValue(e.target.value);\n          setEditing('rgb');\n          let splited = /^rgb\\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*\\)$/.exec(e.target.value);\n\n          if (splited === null) {\n            setRGBValid(false);\n            return;\n          }\n\n          setRGBValid(true);\n          splited = splited.map(x => parseInt(x));\n          setColorValue(rgbToHex(splited[1], splited[2], splited[3]));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"CMYK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!CMYKValid ? 'error' : ''}`,\n        value: CMYKValue,\n        onChange: e => {\n          setCMYKValue(e.target.value);\n          setEditing('cmyk');\n          let splited = /^cmyk\\(([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n\n          if (splited === null) {\n            setCMYKValid(false);\n            return;\n          }\n\n          setCMYKValid(true);\n          splited = splited.map(x => parseInt(x) / 100);\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4]);\n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"HLS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `${!HLSValid ? 'error' : ''}`,\n        value: HLSValue,\n        onChange: e => {\n          setHLSValue(e.target.value);\n          setEditing('hsl');\n          let splited = /^hls\\(([0-9]|[1-9][0-9]|[12][0-9]{2}|3[0-5][0-9])\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n\n          if (splited === null) {\n            setHLSValid(false);\n            return;\n          }\n\n          setHLSValid(true);\n          splited = splited.map(x => parseInt(x));\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KuSaEeF2zGTIA4Swu27GZGdg+g4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js"],"names":["React","useEffect","useState","App","colorValue","setColorValue","RGBValue","setRGBValue","CMYKValue","setCMYKValue","HLSValue","setHLSValue","RGBValid","setRGBValid","CMYKValid","setCMYKValid","HLSValid","setHLSValid","editing","setEditing","rgb","hexToRgb","cmyk","rgbToCmyk","r","g","b","c","m","y","k","hex","result","exec","parseInt","rgbToHex","componentToHex","toString","length","cmykToRgb","Math","round","min","colorInput","e","target","value","splited","map","x"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [colorValue, setColorValue] = useState('#000000')\n  const [RGBValue, setRGBValue] = useState('rgb(0, 0, 0)')\n  const [CMYKValue, setCMYKValue] = useState('cmyk(0%, 0%, 0%, 100%)')\n  const [HLSValue, setHLSValue] = useState('hls(0, 0%, 0%)')\n\n  const [RGBValid, setRGBValid] = useState(true)\n  const [CMYKValid, setCMYKValid] = useState(true)\n  const [HLSValid, setHLSValid] = useState(true)\n\n  const [editing, setEditing] = useState(null)\n\n  useEffect(() => {\n    if (editing == null)\n      return\n\n    let rgb = hexToRgb(colorValue)\n    let cmyk = rgbToCmyk(rgb.r, rgb.g, rgb.b)\n    \n    if (editing != 'rgb')\n      setRGBValue(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`)\n    if (editing != 'cmyk')\n      setCMYKValue(`cmyk(${cmyk.c}%, ${cmyk.m}%, ${cmyk.y}%, ${cmyk.k}%)`)\n  }, [colorValue])\n\n  const hexToRgb = (hex) => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n  \n  const rgbToHex= (r, g, b) => {\n    const componentToHex = (c) => {\n      let hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    }\n\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  const cmykToRgb = (c, m, y, k) => {\n    return {\n      r: Math.round(255 * (1 - c) * (1 - k)),\n      g: Math.round(255 * (1 - m) * (1 - k)),\n      b: Math.round(255 * (1 - y) * (1 - k))\n    }\n  }\n\n  const rgbToCmyk = (r, g, b) => {\n    let k = Math.min(1 - r / 255, 1 - g / 255, 1 - b / 255)\n    return {\n      c: Math.round(100 * (1 - r / 255 - k) / (1 - k)),\n      m: Math.round(100 * (1 - g / 255 - k) / (1 - k)),\n      y: Math.round(100 * (1 - b / 255 - k) / (1 - k)),\n      k: Math.round(100 * k)\n    }\n  }\n\n  const colorInput = (e) => {\n    setColorValue(e.target.value)\n    setEditing('none')\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>RGB, CMYK, HLS</h1>\n      <div>\n        <input type='color' value={colorValue} onInput={colorInput}/>\n      </div>\n      <div>\n        <span>RGB</span>\n        <input type='text' className={`${!RGBValid ? 'error' : ''}`} value={RGBValue} onChange={(e) => {\n          setRGBValue(e.target.value)\n          setEditing('rgb')\n\n          let splited = /^rgb\\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setRGBValid(false);\n            return\n          }\n          setRGBValid(true);\n\n          splited = splited.map((x) => parseInt(x))\n          setColorValue(rgbToHex(splited[1], splited[2], splited[3]))\n          }}/>\n      </div>\n      <div>\n        <span>CMYK</span>\n        <input type='text' className={`${!CMYKValid ? 'error' : ''}`} value={CMYKValue} onChange={(e) => {\n          setCMYKValue(e.target.value)\n          setEditing('cmyk')\n\n          let splited = /^cmyk\\(([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setCMYKValid(false);\n            return\n          }\n          setCMYKValid(true);\n\n          splited = splited.map((x) => parseInt(x) / 100)\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4])\n          \n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b))\n          }}/>\n      </div>\n      <div>\n        <span>HLS</span>\n        <input type='text' className={`${!HLSValid ? 'error' : ''}`} value={HLSValue} onChange={(e) => {\n          setHLSValue(e.target.value)\n          setEditing('hsl')\n          \n          let splited = /^hls\\(([0-9]|[1-9][0-9]|[12][0-9]{2}|3[0-5][0-9])\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value)\n          \n          if (splited === null) {\n            setHLSValid(false);\n            return\n          }\n          setHLSValid(true);\n\n          splited = splited.map((x) => parseInt(x))\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4])\n          \n          }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
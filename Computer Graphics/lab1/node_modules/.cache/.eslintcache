[{"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/index.js":"1","/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/reportWebVitals.js":"2","/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js":"3"},{"size":500,"mtime":1645348055895,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1645348055895,"results":"6","hashOfConfig":"5"},{"size":5556,"mtime":1645374595589,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1ug0362",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/index.js",[],[],["19","20"],"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/reportWebVitals.js",[],[],"/home/pavelhardzei/Studying/3_course/6sem/cg/lab1/src/App.js",["21","22","23","24","25"],[],"import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [colorValue, setColorValue] = useState('#000000')\n  const [RGBValue, setRGBValue] = useState('rgb(0, 0, 0)')\n  const [CMYKValue, setCMYKValue] = useState('cmyk(0%, 0%, 0%, 100%)')\n  const [HLSValue, setHLSValue] = useState('hls(0, 0%, 0%)')\n\n  const [RGBValid, setRGBValid] = useState(true)\n  const [CMYKValid, setCMYKValid] = useState(true)\n  const [HLSValid, setHLSValid] = useState(true)\n\n  const [editing, setEditing] = useState(null)\n\n  useEffect(() => {\n    if (editing == null)\n      return\n\n    let rgb = hexToRgb(colorValue)\n    let cmyk = rgbToCmyk(rgb.r, rgb.g, rgb.b)\n    let hls = rgbToHls(rgb.r, rgb.g, rgb.b)\n    \n    if (editing != 'rgb')\n      setRGBValue(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`)\n    if (editing != 'cmyk')\n      setCMYKValue(`cmyk(${cmyk.c}%, ${cmyk.m}%, ${cmyk.y}%, ${cmyk.k}%)`)\n    if (editing != 'hls')\n      setHLSValue(`hls(${hls.h}, ${hls.l}%, ${hls.s}%)`)\n  }, [colorValue])\n\n  const hexToRgb = (hex) => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n  \n  const rgbToHex= (r, g, b) => {\n    const componentToHex = (c) => {\n      let hex = c.toString(16);\n      return hex.length == 1 ? \"0\" + hex : hex;\n    }\n\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  const cmykToRgb = (c, m, y, k) => {\n    return {\n      r: Math.round(255 * (1 - c) * (1 - k)),\n      g: Math.round(255 * (1 - m) * (1 - k)),\n      b: Math.round(255 * (1 - y) * (1 - k))\n    }\n  }\n\n  const rgbToCmyk = (r, g, b) => {\n    let k = Math.min(1 - r / 255, 1 - g / 255, 1 - b / 255)\n    return {\n      c: Math.round(100 * (1 - r / 255 - k) / (1 - k)),\n      m: Math.round(100 * (1 - g / 255 - k) / (1 - k)),\n      y: Math.round(100 * (1 - b / 255 - k) / (1 - k)),\n      k: Math.round(100 * k)\n    }\n  }\n\n  const hlsToRgb = (h, l, s) => {\n    l /= 100\n    s /= 100\n\n    let c = (1 - Math.abs(2 * l - 1)) * s\n    let x = c * (1 - Math.abs(Math.floor(h / 60) % 2 - 1))\n    let m = l - c / 2\n\n    let arr = [[c, x, 0], [x, c, 0], [0, c, x], [0, x, c], [x, 0, c], [c, 0, x]]\n    let [r, g, b] = arr[Math.floor(h / 60)]\n    \n    return {\n      r: Math.round(255 * (r + m)),\n      g: Math.round(255 * (g + m)),\n      b: Math.round(255 * (b + m))\n    }\n  }\n\n  const rgbToHls = (r, g, b) => {\n    r /= 255\n    g /= 255\n    b /= 255\n\n    let cMax = Math.max(r, g, b)\n    let cMin = Math.min(r, g, b)\n    let delta = cMax - cMin\n\n    let h, l, s\n\n    if (delta === 0)\n      h = 0\n    else if (cMax === r)\n      h = 60 * (((g - b) / delta) % 6)\n    else if (cMax === g)\n      h = 60 * ((b - r) / delta + 2)\n    else\n      h = 60 * ((r - g) / delta + 4)\n    \n    l = (cMax + cMin) / 2\n\n    s = delta / (1 - Math.abs(2 * l - 1))\n\n    h = Math.round(h)\n\n    return {\n      h: h < 0 ? 360 + h : h,\n      l: Math.round(100 * l),\n      s: Math.round(100 * s)\n    }\n  }\n\n  const colorInput = (e) => {\n    setColorValue(e.target.value)\n    setEditing('none')\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>RGB, CMYK, HLS</h1>\n      <div>\n        <input type='color' value={colorValue} onInput={colorInput}/>\n      </div>\n      <div>\n        <span>RGB</span>\n        <input type='text' className={`${!RGBValid ? 'error' : ''}`} value={RGBValue} onChange={(e) => {\n          setRGBValue(e.target.value)\n          setEditing('rgb')\n\n          let splited = /^rgb\\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*,\\s*([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setRGBValid(false);\n            return\n          }\n          setRGBValid(true);\n\n          splited = splited.map((x) => parseInt(x))\n          setColorValue(rgbToHex(splited[1], splited[2], splited[3]))\n          }}/>\n      </div>\n      <div>\n        <span>CMYK</span>\n        <input type='text' className={`${!CMYKValid ? 'error' : ''}`} value={CMYKValue} onChange={(e) => {\n          setCMYKValue(e.target.value)\n          setEditing('cmyk')\n\n          let splited = /^cmyk\\(([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value);\n          \n          if (splited === null) {\n            setCMYKValid(false);\n            return\n          }\n          setCMYKValid(true);\n\n          splited = splited.map((x) => parseInt(x) / 100)\n          let rgb = cmykToRgb(splited[1], splited[2], splited[3], splited[4])\n          \n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b))\n          }}/>\n      </div>\n      <div>\n        <span>HLS</span>\n        <input type='text' className={`${!HLSValid ? 'error' : ''}`} value={HLSValue} onChange={(e) => {\n          setHLSValue(e.target.value)\n          setEditing('hls')\n          \n          let splited = /^hls\\(([0-9]|[1-9][0-9]|[12][0-9]{2}|3[0-5][0-9])\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*,\\s*([0-9]|[1-9][0-9]|100)%\\s*\\)$/.exec(e.target.value)\n          \n          if (splited === null) {\n            setHLSValid(false);\n            return\n          }\n          setHLSValid(true);\n\n          splited = splited.map((x) => parseInt(x))\n          let rgb = hlsToRgb(splited[1], splited[2], splited[3])\n          \n          setColorValue(rgbToHex(rgb.r, rgb.g, rgb.b))\n          }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":24,"column":17,"nodeType":"32","messageId":"33","endLine":24,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":26,"column":17,"nodeType":"32","messageId":"33","endLine":26,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":28,"column":17,"nodeType":"32","messageId":"33","endLine":28,"endColumn":19},{"ruleId":"34","severity":1,"message":"35","line":30,"column":6,"nodeType":"36","endLine":30,"endColumn":18,"suggestions":"37"},{"ruleId":"30","severity":1,"message":"38","line":44,"column":25,"nodeType":"32","messageId":"33","endLine":44,"endColumn":27},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'editing'. Either include it or remove the dependency array.","ArrayExpression",["41"],"Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [colorValue, editing]",{"range":"44","text":"45"},[996,1008],"[colorValue, editing]"]